import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Converter
{
  //Constants
  
  //Instance Variables
  private JFrame frame;
  private JTextField decimalField;
  private JPanel panel;
  private JLabel label;
  private JTextField hexField;
  private JTextField binaryField;
  private ActionListener listener;
  private String number;
  private BaseConverter converter;
  
  //Constructors
  public Converter()
  {
    this.listener = new KeyboardListener();
    this.converter = new BaseConverter();
    this.createFrame();
    this.createFillPanel();
    this.frame.add( this.panel );
  }
  
  //Methods
  
  /**
   * Creates a frame for the Pot Luck game
   */
  public void createFrame()
  {
    this.frame = new JFrame();     //Creates the JFrame object
    this.frame.setSize( 400, 300 );  //Sets the size
    this.frame.setTitle( "Number Converter" );  //Sets title
    this.frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );  //The frame will be killed when closed
    this.frame.setVisible( true ); //Sets visible
  }
  
  public void createFillPanel()
  {
    this.panel = new JPanel();
    this.panel.setLayout( new GridLayout( 3, 2 ) );
    
    this.createTextFields();
    
    this.panel.add( this.createLabel( "Decimal", 100, 100 ) );
    this.panel.add( this.decimalField );
    this.panel.add( this.createLabel( "Hex", 100, 100 ) );
    this.panel.add( this.hexField );
    this.panel.add( this.createLabel( "Binary", 100, 100 ) );
    this.panel.add( this.binaryField );
  }
  
  public JLabel createLabel( String name, int x, int y )
  {
    JLabel aLabel = new JLabel( name );
    aLabel.setPreferredSize( new Dimension( x, y ) );
    return aLabel;
  }
  
  public void createTextFields()
  {
    this.decimalField = new JTextField( 50 );
    this.hexField = new JTextField( 50 );
    this.binaryField = new JTextField( 50 );
    
    decimalField.addActionListener ( listener );
    hexField.addActionListener ( listener );
    binaryField.addActionListener ( listener );
  }
  
  public class KeyboardListener implements ActionListener
  {
    public void actionPerformed( ActionEvent event )
    {
      if ( event.getSource() == decimalField )
      {
        hexField.setText( converter.decToHex( decimalField.getText() ) );
        binaryField.setText( converter.decToBin( decimalField.getText() ) );
      }
      
      else if ( event.getSource() == hexField )
      {
        decimalField.setText( converter.hexToDec( hexField.getText() ) );
        binaryField.setText( converter.hexToBin( hexField.getText() ) );
      }
      
      else if ( event.getSource() == binaryField )
      {
        decimalField.setText( converter.binToDec( binaryField.getText() ) );
        hexField.setText( converter.binToHex( binaryField.getText() ) );
      }
        
    }
  }
}